public class Solution {
    public boolean isMatch(String s, String p) {
        int m = s.length();
        int n = p.length();
        
        // dp[i][j] represents whether s[0..i-1] matches p[0..j-1]
        boolean[][] dp = new boolean[m + 1][n + 1];
        
        // Initial condition: empty string matches empty pattern
        dp[0][0] = true;
        
        // Handle patterns like "*" that can match empty string
        for (int j = 1; j <= n; j++) {
            if (p.charAt(j - 1) == '*') {
                dp[0][j] = dp[0][j - 1];  // '*' can match empty sequence
            }
        }
        
        // Fill the dp table
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                char patternChar = p.charAt(j - 1);
                
                if (patternChar == '*') {
                    // '*' matches either empty sequence or at least one character
                    dp[i][j] = dp[i - 1][j] || dp[i][j - 1];
                } else if (patternChar == '?' || s.charAt(i - 1) == patternChar) {
                    // '?' matches any character, or exact match for letter
                    dp[i][j] = dp[i - 1][j - 1];
                }
            }
        }
        
        // Final result is stored at dp[m][n]
        return dp[m][n];
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        
        String s = "aa";
        String p = "a";
        System.out.println(solution.isMatch(s, p));  // Output: false
        
        s = "aa";
        p = "a*";
        System.out.println(solution.isMatch(s, p));  // Output: true
    }
}
