import java.util.*;

public class Solution {
    
    // Method to check if a string is balanced
    public static boolean isBalanced(String s) {
        // Stack to hold the opening brackets
        Stack<Character> stack = new Stack<>();
        
        // Traverse each character in the string
        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            
            // If the character is an opening bracket, push it onto the stack
            if (ch == '{' || ch == '[' || ch == '(') {
                stack.push(ch);
            }
            // If the character is a closing bracket
            else if (ch == '}' || ch == ']' || ch == ')') {
                // If stack is empty or top of the stack doesn't match the corresponding opening bracket
                if (stack.isEmpty()) {
                    return false;
                }
                char top = stack.pop();
                if ((ch == '}' && top != '{') ||
                    (ch == ']' && top != '[') ||
                    (ch == ')' && top != '(')) {
                    return false;
                }
            }
        }
        
        // If the stack is empty, the string is balanced
        return stack.isEmpty();
    }
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // Read input until end-of-file (EOF)
        while (scanner.hasNextLine()) {
            String input = scanner.nextLine().trim();
            
            // Check if the string is balanced and print the result
            if (isBalanced(input)) {
                System.out.println("true");
            } else {
                System.out.println("false");
            }
        }
        
        scanner.close();
    }
}
